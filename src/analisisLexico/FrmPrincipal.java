/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analisisLexico;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtEntrada = new javax.swing.JTextField();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEntrada.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        btnAnalizar.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizar)
                    .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // Crear un archivo temporal con la entrada del texto para el lexer
        File archivo = new File("archivo.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtEntrada.getText());  // Guardar el texto del campo de entrada en el archivo
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            // Leer el archivo y pasar al lexer
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            StringBuilder resultado = new StringBuilder();  // Utilizamos StringBuilder para construir el resultado

            while (true) {
                Tokens tokens = lexer.yylex();  // Leer el siguiente token
                if (tokens == null) {
                    resultado.append("FIN");
                    txtResultado.setText(resultado.toString());  // Mostrar el resultado en el área de texto
                    return;
                }
                switch (tokens) {
                    case ERROR:
                        resultado.append("Símbolo no definido\n");
                        break;
                    case IDENTIFICADOR:
                        resultado.append(lexer.lexeme).append(": Es un identificador\n");
                        break;
                    case CREAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para crear algo\n");
                        break;
                    case ARRAY:
                        resultado.append(lexer.lexeme).append(": Es una palabra reservada para crear un array\n");
                        break;
                    case LISTA:
                        resultado.append(lexer.lexeme).append(": Es una palabra reservada para crear una lista\n");
                        break;
                    case MATRIZ:
                        resultado.append(lexer.lexeme).append(": Es una palabra reservada para crear una matriz\n");
                        break;
                    case ASIGNAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para asignar valores\n");
                        break;
                    case MODIFICAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para modificar valores\n");
                        break;
                    case ELIMINAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para eliminar\n");
                        break;
                    case AGREGAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para agregar\n");
                        break;
                    case REMOVER:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para remover\n");
                        break;
                    case PINTAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para pintar\n");
                        break;
                    case MOSTRAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para mostrar valores\n");
                        break;
                    case VACIAR:
                        resultado.append(lexer.lexeme).append(": Es una instrucción para vaciar la estructura\n");
                        break;
                    case COLOR:
                        resultado.append(lexer.lexeme).append(": Es un valor de color\n");
                        break;
                    case A:
                        resultado.append(lexer.lexeme).append(": Es la palabra clave 'a'\n");
                        break;
                    case EN:
                        resultado.append(lexer.lexeme).append(": Es la palabra clave 'en'\n");
                        break;
                    case CORCHETEA:
                        resultado.append(lexer.lexeme).append(": Es un corchete abierto '['\n");
                        break;
                    case CORCHETEC:
                        resultado.append(lexer.lexeme).append(": Es un corchete cerrado ']'\n");
                        break;
                    case FINAL:
                        resultado.append(lexer.lexeme).append(": Es un punto y coma ';'\n");
                        break;
                    case DIGITO:
                        resultado.append(lexer.lexeme).append(": Es un valor numérico\n");
                        break;
                    case INDICE_MATRIZ:
                        resultado.append(lexer.lexeme).append(": Es un índice de matriz\n");
                        break;
                    default:
                        resultado.append("Token no reconocido: ").append(tokens).append("\n");
                        break;
                }

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
